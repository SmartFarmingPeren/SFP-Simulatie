//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Moveit
{
    public class PlaceResult : Message
    {
        public const string RosMessageName = "moveit_msgs/Place";

        //  The result of the place attempt
        public MoveItErrorCodes error_code;
        //  The full starting state of the robot at the start of the trajectory
        public RobotState trajectory_start;
        //  The trajectory that moved group produced for execution
        public RobotTrajectory[] trajectory_stages;
        public string[] trajectory_descriptions;
        //  The successful place location, if any
        public PlaceLocation place_location;
        //  The amount of time in seconds it took to complete the plan
        public double planning_time;

        public PlaceResult()
        {
            this.error_code = new MoveItErrorCodes();
            this.trajectory_start = new RobotState();
            this.trajectory_stages = new RobotTrajectory[0];
            this.trajectory_descriptions = new string[0];
            this.place_location = new PlaceLocation();
            this.planning_time = 0.0;
        }

        public PlaceResult(MoveItErrorCodes error_code, RobotState trajectory_start, RobotTrajectory[] trajectory_stages, string[] trajectory_descriptions, PlaceLocation place_location, double planning_time)
        {
            this.error_code = error_code;
            this.trajectory_start = trajectory_start;
            this.trajectory_stages = trajectory_stages;
            this.trajectory_descriptions = trajectory_descriptions;
            this.place_location = place_location;
            this.planning_time = planning_time;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(error_code.SerializationStatements());
            listOfSerializations.AddRange(trajectory_start.SerializationStatements());
            
            listOfSerializations.Add(BitConverter.GetBytes(trajectory_stages.Length));
            foreach(var entry in trajectory_stages)
                listOfSerializations.Add(entry.Serialize());
            
            listOfSerializations.Add(BitConverter.GetBytes(trajectory_descriptions.Length));
            foreach(var entry in trajectory_descriptions)
                listOfSerializations.Add(SerializeString(entry));
            listOfSerializations.AddRange(place_location.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.planning_time));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.error_code.Deserialize(data, offset);
            offset = this.trajectory_start.Deserialize(data, offset);
            
            var trajectory_stagesArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.trajectory_stages= new RobotTrajectory[trajectory_stagesArrayLength];
            for(var i = 0; i < trajectory_stagesArrayLength; i++)
            {
                this.trajectory_stages[i] = new RobotTrajectory();
                offset = this.trajectory_stages[i].Deserialize(data, offset);
            }
            
            var trajectory_descriptionsArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.trajectory_descriptions= new string[trajectory_descriptionsArrayLength];
            for(var i = 0; i < trajectory_descriptionsArrayLength; i++)
            {
                var trajectory_descriptionsStringBytesLength = DeserializeLength(data, offset);
                offset += 4;
                this.trajectory_descriptions[i] = DeserializeString(data, offset, trajectory_descriptionsStringBytesLength);
                offset += trajectory_descriptionsStringBytesLength;
            }
            offset = this.place_location.Deserialize(data, offset);
            this.planning_time = BitConverter.ToDouble(data, offset);
            offset += 8;

            return offset;
        }

        public override string ToString()
        {
            return "PlaceResult: " +
            "\nerror_code: " + error_code.ToString() +
            "\ntrajectory_start: " + trajectory_start.ToString() +
            "\ntrajectory_stages: " + System.String.Join(", ", trajectory_stages.ToList()) +
            "\ntrajectory_descriptions: " + System.String.Join(", ", trajectory_descriptions.ToList()) +
            "\nplace_location: " + place_location.ToString() +
            "\nplanning_time: " + planning_time.ToString();
        }
    }
}
