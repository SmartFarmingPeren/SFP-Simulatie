//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Moveit
{
    public class MoveGroupResult : Message
    {
        public const string RosMessageName = "moveit_msgs/MoveGroup";

        //  An error code reflecting what went wrong
        public MoveItErrorCodes error_code;
        //  The full starting state of the robot at the start of the trajectory
        public RobotState trajectory_start;
        //  The trajectory that moved group produced for execution
        public RobotTrajectory planned_trajectory;
        //  The trace of the trajectory recorded during execution
        public RobotTrajectory executed_trajectory;
        //  The amount of time it took to complete the motion plan
        public double planning_time;

        public MoveGroupResult()
        {
            this.error_code = new MoveItErrorCodes();
            this.trajectory_start = new RobotState();
            this.planned_trajectory = new RobotTrajectory();
            this.executed_trajectory = new RobotTrajectory();
            this.planning_time = 0.0;
        }

        public MoveGroupResult(MoveItErrorCodes error_code, RobotState trajectory_start, RobotTrajectory planned_trajectory, RobotTrajectory executed_trajectory, double planning_time)
        {
            this.error_code = error_code;
            this.trajectory_start = trajectory_start;
            this.planned_trajectory = planned_trajectory;
            this.executed_trajectory = executed_trajectory;
            this.planning_time = planning_time;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(error_code.SerializationStatements());
            listOfSerializations.AddRange(trajectory_start.SerializationStatements());
            listOfSerializations.AddRange(planned_trajectory.SerializationStatements());
            listOfSerializations.AddRange(executed_trajectory.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.planning_time));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.error_code.Deserialize(data, offset);
            offset = this.trajectory_start.Deserialize(data, offset);
            offset = this.planned_trajectory.Deserialize(data, offset);
            offset = this.executed_trajectory.Deserialize(data, offset);
            this.planning_time = BitConverter.ToDouble(data, offset);
            offset += 8;

            return offset;
        }

        public override string ToString()
        {
            return "MoveGroupResult: " +
            "\nerror_code: " + error_code.ToString() +
            "\ntrajectory_start: " + trajectory_start.ToString() +
            "\nplanned_trajectory: " + planned_trajectory.ToString() +
            "\nexecuted_trajectory: " + executed_trajectory.ToString() +
            "\nplanning_time: " + planning_time.ToString();
        }
    }
}
