//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Moveit
{
    public class PlaceGoal : Message
    {
        public const string RosMessageName = "moveit_msgs/Place";

        //  An action for placing an object
        //  which group to be used to plan for grasping
        public string group_name;
        //  the name of the attached object to place
        public string attached_object_name;
        //  a list of possible transformations for placing the object
        public PlaceLocation[] place_locations;
        //  if the user prefers setting the eef pose (same as in pick) rather than 
        //  the location of the object, this flag should be set to true
        public bool place_eef;
        //  the name that the support surface (e.g. table) has in the collision world
        //  can be left empty if no name is available
        public string support_surface_name;
        //  whether collisions between the gripper and the support surface should be acceptable
        //  during move from pre-place to place and during retreat. Collisions when moving to the
        //  pre-place location are still not allowed even if this is set to true.
        public bool allow_gripper_support_collision;
        //  Optional constraints to be imposed on every point in the motion plan
        public Constraints path_constraints;
        //  The name of the motion planner to use. If no name is specified,
        //  a default motion planner will be used
        public string planner_id;
        //  an optional list of obstacles that we have semantic information about
        //  and that can be touched/pushed/moved in the course of placing;
        //  CAREFUL: If the object name 'all' is used, collisions with all objects are disabled during the approach & retreat.
        public string[] allowed_touch_objects;
        //  The maximum amount of time the motion planner is allowed to plan for
        public double allowed_planning_time;
        //  Planning options
        public PlanningOptions planning_options;

        public PlaceGoal()
        {
            this.group_name = "";
            this.attached_object_name = "";
            this.place_locations = new PlaceLocation[0];
            this.place_eef = false;
            this.support_surface_name = "";
            this.allow_gripper_support_collision = false;
            this.path_constraints = new Constraints();
            this.planner_id = "";
            this.allowed_touch_objects = new string[0];
            this.allowed_planning_time = 0.0;
            this.planning_options = new PlanningOptions();
        }

        public PlaceGoal(string group_name, string attached_object_name, PlaceLocation[] place_locations, bool place_eef, string support_surface_name, bool allow_gripper_support_collision, Constraints path_constraints, string planner_id, string[] allowed_touch_objects, double allowed_planning_time, PlanningOptions planning_options)
        {
            this.group_name = group_name;
            this.attached_object_name = attached_object_name;
            this.place_locations = place_locations;
            this.place_eef = place_eef;
            this.support_surface_name = support_surface_name;
            this.allow_gripper_support_collision = allow_gripper_support_collision;
            this.path_constraints = path_constraints;
            this.planner_id = planner_id;
            this.allowed_touch_objects = allowed_touch_objects;
            this.allowed_planning_time = allowed_planning_time;
            this.planning_options = planning_options;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.Add(SerializeString(this.group_name));
            listOfSerializations.Add(SerializeString(this.attached_object_name));
            
            listOfSerializations.Add(BitConverter.GetBytes(place_locations.Length));
            foreach(var entry in place_locations)
                listOfSerializations.Add(entry.Serialize());
            listOfSerializations.Add(BitConverter.GetBytes(this.place_eef));
            listOfSerializations.Add(SerializeString(this.support_surface_name));
            listOfSerializations.Add(BitConverter.GetBytes(this.allow_gripper_support_collision));
            listOfSerializations.AddRange(path_constraints.SerializationStatements());
            listOfSerializations.Add(SerializeString(this.planner_id));
            
            listOfSerializations.Add(BitConverter.GetBytes(allowed_touch_objects.Length));
            foreach(var entry in allowed_touch_objects)
                listOfSerializations.Add(SerializeString(entry));
            listOfSerializations.Add(BitConverter.GetBytes(this.allowed_planning_time));
            listOfSerializations.AddRange(planning_options.SerializationStatements());

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            var group_nameStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.group_name = DeserializeString(data, offset, group_nameStringBytesLength);
            offset += group_nameStringBytesLength;
            var attached_object_nameStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.attached_object_name = DeserializeString(data, offset, attached_object_nameStringBytesLength);
            offset += attached_object_nameStringBytesLength;
            
            var place_locationsArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.place_locations= new PlaceLocation[place_locationsArrayLength];
            for(var i = 0; i < place_locationsArrayLength; i++)
            {
                this.place_locations[i] = new PlaceLocation();
                offset = this.place_locations[i].Deserialize(data, offset);
            }
            this.place_eef = BitConverter.ToBoolean(data, offset);
            offset += 1;
            var support_surface_nameStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.support_surface_name = DeserializeString(data, offset, support_surface_nameStringBytesLength);
            offset += support_surface_nameStringBytesLength;
            this.allow_gripper_support_collision = BitConverter.ToBoolean(data, offset);
            offset += 1;
            offset = this.path_constraints.Deserialize(data, offset);
            var planner_idStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.planner_id = DeserializeString(data, offset, planner_idStringBytesLength);
            offset += planner_idStringBytesLength;
            
            var allowed_touch_objectsArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.allowed_touch_objects= new string[allowed_touch_objectsArrayLength];
            for(var i = 0; i < allowed_touch_objectsArrayLength; i++)
            {
                var allowed_touch_objectsStringBytesLength = DeserializeLength(data, offset);
                offset += 4;
                this.allowed_touch_objects[i] = DeserializeString(data, offset, allowed_touch_objectsStringBytesLength);
                offset += allowed_touch_objectsStringBytesLength;
            }
            this.allowed_planning_time = BitConverter.ToDouble(data, offset);
            offset += 8;
            offset = this.planning_options.Deserialize(data, offset);

            return offset;
        }

        public override string ToString()
        {
            return "PlaceGoal: " +
            "\ngroup_name: " + group_name.ToString() +
            "\nattached_object_name: " + attached_object_name.ToString() +
            "\nplace_locations: " + System.String.Join(", ", place_locations.ToList()) +
            "\nplace_eef: " + place_eef.ToString() +
            "\nsupport_surface_name: " + support_surface_name.ToString() +
            "\nallow_gripper_support_collision: " + allow_gripper_support_collision.ToString() +
            "\npath_constraints: " + path_constraints.ToString() +
            "\nplanner_id: " + planner_id.ToString() +
            "\nallowed_touch_objects: " + System.String.Join(", ", allowed_touch_objects.ToList()) +
            "\nallowed_planning_time: " + allowed_planning_time.ToString() +
            "\nplanning_options: " + planning_options.ToString();
        }
    }
}
