//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Moveit
{
    public class ExecuteKnownTrajectoryRequest : Message
    {
        public const string RosMessageName = "moveit_msgs/ExecuteKnownTrajectory";

        //  This service is deprecated and will go away at some point. For new development use the ExecuteTrajectory action.
        //  Effective since: Indigo 0.7.4, Jade and Kinetic 0.8.3
        //  The trajectory to execute 
        public RobotTrajectory trajectory;
        //  Set this to true if the service should block until the execution is complete
        public bool wait_for_execution;

        public ExecuteKnownTrajectoryRequest()
        {
            this.trajectory = new RobotTrajectory();
            this.wait_for_execution = false;
        }

        public ExecuteKnownTrajectoryRequest(RobotTrajectory trajectory, bool wait_for_execution)
        {
            this.trajectory = trajectory;
            this.wait_for_execution = wait_for_execution;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(trajectory.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.wait_for_execution));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.trajectory.Deserialize(data, offset);
            this.wait_for_execution = BitConverter.ToBoolean(data, offset);
            offset += 1;

            return offset;
        }

        public override string ToString()
        {
            return "ExecuteKnownTrajectoryRequest: " +
            "\ntrajectory: " + trajectory.ToString() +
            "\nwait_for_execution: " + wait_for_execution.ToString();
        }
    }
}
