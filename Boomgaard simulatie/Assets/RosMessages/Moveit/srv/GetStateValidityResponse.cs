//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Moveit
{
    public class GetStateValidityResponse : Message
    {
        public const string RosMessageName = "moveit_msgs/GetStateValidity";

        public bool valid;
        public ContactInformation[] contacts;
        public CostSource[] cost_sources;
        public ConstraintEvalResult[] constraint_result;

        public GetStateValidityResponse()
        {
            this.valid = false;
            this.contacts = new ContactInformation[0];
            this.cost_sources = new CostSource[0];
            this.constraint_result = new ConstraintEvalResult[0];
        }

        public GetStateValidityResponse(bool valid, ContactInformation[] contacts, CostSource[] cost_sources, ConstraintEvalResult[] constraint_result)
        {
            this.valid = valid;
            this.contacts = contacts;
            this.cost_sources = cost_sources;
            this.constraint_result = constraint_result;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.Add(BitConverter.GetBytes(this.valid));
            
            listOfSerializations.Add(BitConverter.GetBytes(contacts.Length));
            foreach(var entry in contacts)
                listOfSerializations.Add(entry.Serialize());
            
            listOfSerializations.Add(BitConverter.GetBytes(cost_sources.Length));
            foreach(var entry in cost_sources)
                listOfSerializations.Add(entry.Serialize());
            
            listOfSerializations.Add(BitConverter.GetBytes(constraint_result.Length));
            foreach(var entry in constraint_result)
                listOfSerializations.Add(entry.Serialize());

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            this.valid = BitConverter.ToBoolean(data, offset);
            offset += 1;
            
            var contactsArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.contacts= new ContactInformation[contactsArrayLength];
            for(var i = 0; i < contactsArrayLength; i++)
            {
                this.contacts[i] = new ContactInformation();
                offset = this.contacts[i].Deserialize(data, offset);
            }
            
            var cost_sourcesArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.cost_sources= new CostSource[cost_sourcesArrayLength];
            for(var i = 0; i < cost_sourcesArrayLength; i++)
            {
                this.cost_sources[i] = new CostSource();
                offset = this.cost_sources[i].Deserialize(data, offset);
            }
            
            var constraint_resultArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.constraint_result= new ConstraintEvalResult[constraint_resultArrayLength];
            for(var i = 0; i < constraint_resultArrayLength; i++)
            {
                this.constraint_result[i] = new ConstraintEvalResult();
                offset = this.constraint_result[i].Deserialize(data, offset);
            }

            return offset;
        }

        public override string ToString()
        {
            return "GetStateValidityResponse: " +
            "\nvalid: " + valid.ToString() +
            "\ncontacts: " + System.String.Join(", ", contacts.ToList()) +
            "\ncost_sources: " + System.String.Join(", ", cost_sources.ToList()) +
            "\nconstraint_result: " + System.String.Join(", ", constraint_result.ToList());
        }
    }
}
