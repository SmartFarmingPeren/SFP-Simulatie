//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Moveit
{
    public class SetPlannerParamsRequest : Message
    {
        public const string RosMessageName = "moveit_msgs/SetPlannerParams";

        //  Name of planning config
        public string planner_config;
        //  Optional name of planning group (set global defaults if empty)
        public string group;
        //  parameters as key-value pairs
        public PlannerParams @params;
        //  replace params or augment existing ones?
        public bool replace;

        public SetPlannerParamsRequest()
        {
            this.planner_config = "";
            this.group = "";
            this.@params = new PlannerParams();
            this.replace = false;
        }

        public SetPlannerParamsRequest(string planner_config, string group, PlannerParams @params, bool replace)
        {
            this.planner_config = planner_config;
            this.group = group;
            this.@params = @params;
            this.replace = replace;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.Add(SerializeString(this.planner_config));
            listOfSerializations.Add(SerializeString(this.group));
            listOfSerializations.AddRange(@params.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.replace));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            var planner_configStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.planner_config = DeserializeString(data, offset, planner_configStringBytesLength);
            offset += planner_configStringBytesLength;
            var groupStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.group = DeserializeString(data, offset, groupStringBytesLength);
            offset += groupStringBytesLength;
            offset = this.@params.Deserialize(data, offset);
            this.replace = BitConverter.ToBoolean(data, offset);
            offset += 1;

            return offset;
        }

        public override string ToString()
        {
            return "SetPlannerParamsRequest: " +
            "\nplanner_config: " + planner_config.ToString() +
            "\ngroup: " + group.ToString() +
            "\n@params: " + @params.ToString() +
            "\nreplace: " + replace.ToString();
        }
    }
}
