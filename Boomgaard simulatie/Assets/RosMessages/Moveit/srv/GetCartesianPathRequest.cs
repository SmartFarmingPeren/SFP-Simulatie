//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.Moveit
{
    public class GetCartesianPathRequest : Message
    {
        public const string RosMessageName = "moveit_msgs/GetCartesianPath";

        //  Define the frame for the specified waypoints
        public Header header;
        //  The start at which to start the Cartesian path
        public RobotState start_state;
        //  Mandatory name of group to compute the path for
        public string group_name;
        //  Optional name of IK link for which waypoints are specified.
        //  If not specified, the tip of the group (which is assumed to be a chain)
        //  is assumed to be the link
        public string link_name;
        //  A sequence of waypoints to be followed by the specified link,
        //  while moving the specified group, such that the group moves only
        //  in a straight line between waypoints
        public Geometry.Pose[] waypoints;
        //  The maximum distance (in Cartesian space) between consecutive points
        //  in the returned path. This must always be specified and > 0
        public double max_step;
        //  If jump_threshold is set > 0, it acts as a scaling factor that is used to
        //  filter out large relative joint-space jumps in the generated Cartesian path.
        //  To this end, the average joint-space distance between consecutive waypoints
        //  is computed. If any joint-space distance is larger than this average distance
        //  by a factor of jump_threshold_factor, this step is considered a jump
        //  and the returned path is truncated before the step.
        public double jump_threshold;
        //  If prismatic_jump_threshold or revolute_jump_threshold are set > 0, then for
        //  all active prismatic or revolute joints, the joint-space difference between
        //  consecutive waypoints is compared to the respective absolute threshold.
        //  If any threshold is exceeded, this step is considered a jump and the returned path
        //  is truncated before the step.
        public double prismatic_jump_threshold;
        public double revolute_jump_threshold;
        //  Set to true if collisions should be avoided when possible
        public bool avoid_collisions;
        //  Specify additional constraints to be met by the Cartesian path
        public Constraints path_constraints;

        public GetCartesianPathRequest()
        {
            this.header = new Header();
            this.start_state = new RobotState();
            this.group_name = "";
            this.link_name = "";
            this.waypoints = new Geometry.Pose[0];
            this.max_step = 0.0;
            this.jump_threshold = 0.0;
            this.prismatic_jump_threshold = 0.0;
            this.revolute_jump_threshold = 0.0;
            this.avoid_collisions = false;
            this.path_constraints = new Constraints();
        }

        public GetCartesianPathRequest(Header header, RobotState start_state, string group_name, string link_name, Geometry.Pose[] waypoints, double max_step, double jump_threshold, double prismatic_jump_threshold, double revolute_jump_threshold, bool avoid_collisions, Constraints path_constraints)
        {
            this.header = header;
            this.start_state = start_state;
            this.group_name = group_name;
            this.link_name = link_name;
            this.waypoints = waypoints;
            this.max_step = max_step;
            this.jump_threshold = jump_threshold;
            this.prismatic_jump_threshold = prismatic_jump_threshold;
            this.revolute_jump_threshold = revolute_jump_threshold;
            this.avoid_collisions = avoid_collisions;
            this.path_constraints = path_constraints;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.AddRange(start_state.SerializationStatements());
            listOfSerializations.Add(SerializeString(this.group_name));
            listOfSerializations.Add(SerializeString(this.link_name));
            
            listOfSerializations.Add(BitConverter.GetBytes(waypoints.Length));
            foreach(var entry in waypoints)
                listOfSerializations.Add(entry.Serialize());
            listOfSerializations.Add(BitConverter.GetBytes(this.max_step));
            listOfSerializations.Add(BitConverter.GetBytes(this.jump_threshold));
            listOfSerializations.Add(BitConverter.GetBytes(this.prismatic_jump_threshold));
            listOfSerializations.Add(BitConverter.GetBytes(this.revolute_jump_threshold));
            listOfSerializations.Add(BitConverter.GetBytes(this.avoid_collisions));
            listOfSerializations.AddRange(path_constraints.SerializationStatements());

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            offset = this.start_state.Deserialize(data, offset);
            var group_nameStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.group_name = DeserializeString(data, offset, group_nameStringBytesLength);
            offset += group_nameStringBytesLength;
            var link_nameStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.link_name = DeserializeString(data, offset, link_nameStringBytesLength);
            offset += link_nameStringBytesLength;
            
            var waypointsArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.waypoints= new Geometry.Pose[waypointsArrayLength];
            for(var i = 0; i < waypointsArrayLength; i++)
            {
                this.waypoints[i] = new Geometry.Pose();
                offset = this.waypoints[i].Deserialize(data, offset);
            }
            this.max_step = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.jump_threshold = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.prismatic_jump_threshold = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.revolute_jump_threshold = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.avoid_collisions = BitConverter.ToBoolean(data, offset);
            offset += 1;
            offset = this.path_constraints.Deserialize(data, offset);

            return offset;
        }

        public override string ToString()
        {
            return "GetCartesianPathRequest: " +
            "\nheader: " + header.ToString() +
            "\nstart_state: " + start_state.ToString() +
            "\ngroup_name: " + group_name.ToString() +
            "\nlink_name: " + link_name.ToString() +
            "\nwaypoints: " + System.String.Join(", ", waypoints.ToList()) +
            "\nmax_step: " + max_step.ToString() +
            "\njump_threshold: " + jump_threshold.ToString() +
            "\nprismatic_jump_threshold: " + prismatic_jump_threshold.ToString() +
            "\nrevolute_jump_threshold: " + revolute_jump_threshold.ToString() +
            "\navoid_collisions: " + avoid_collisions.ToString() +
            "\npath_constraints: " + path_constraints.ToString();
        }
    }
}
